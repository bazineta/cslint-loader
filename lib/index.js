"use strict";

// Generated by CoffeeScript 2.4.1
//-----------------------------------------------------------------------------#
//  CoffeeLint Loader for Webpack
//-----------------------------------------------------------------------------#
//-----------------------------------------------------------------------------#
// Imports
//-----------------------------------------------------------------------------#
var LintError, LintType, coffeelint, getConfig, loadReporter, normalize, reduce, report, utils;
coffeelint = require('coffeelint');
utils = require('loader-utils');
({
  getConfig
} = require('coffeelint/lib/configfinder')); //-----------------------------------------------------------------------------#
// Lint Error; bag the call stack, as it's just noise.
//-----------------------------------------------------------------------------#

LintError = class LintError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;
    this.stack = false;
  }

}; //-----------------------------------------------------------------------------#
// Lint Type, used as a type-specific accumulator for errors and warnings.
//-----------------------------------------------------------------------------#

LintType = class LintType {
  constructor({
    fail,
    emit
  }) {
    this.fail = fail;
    this.emit = emit;
    this.lines = [];
  }

  count() {
    return this.lines.length;
  }

  issue(issue) {
    var line;
    line = `\nLine ${issue.lineNumber}: ${issue.message}`;

    if (issue.context) {
      line += `: ${issue.context}`;
    }

    this.lines.push(line);
  }

  check() {
    var error; // If we have no issues, our work is done here.

    if (!this.count()) {
      return;
    } // We have issues; create an error object describing them.


    error = new LintError(this.lines.join());

    if (this.fail) {
      // If we are supposed to fail the build, then do so by returning
      // the error, otherwise just emit the error.
      return error;
    }

    this.emit(error);
  }

}; //-----------------------------------------------------------------------------#
// Reduce an error report to something easy to deal with.
//-----------------------------------------------------------------------------#

reduce = function ({
  error,
  warn
}) {
  return function ({
    paths
  }) {
    var issue, issues, ref, type;
    type = {
      error: new LintType(error),
      warn: new LintType(warn)
    };
    ref = Object.values(paths);

    for (issues of ref) {
      for (issue of issues) {
        type[issue.level].issue(issue);
      }
    }

    return {
      issue: type.error.count() || type.warn.count(),
      check: function () {
        return type.error.check() || type.warn.check();
      }
    };
  };
}; //-----------------------------------------------------------------------------#
// Attempt to load a reporter of the type requested, which can be either a
// function, in which case we're done, one of the default reporters that
// ship with CoffeeLint, or an external reporter. If no reporter was
// provided, use the stylish reporter. Throw if the reporter type provided
// is invalid.
//-----------------------------------------------------------------------------#


loadReporter = function (type) {
  if (typeof type === 'function') {
    return type;
  }

  if (type == null) {
    type = 'coffeelint-stylish';
  }

  try {
    return require(`coffeelint/lib/reporters/${type}`);
  } catch (error1) {}

  try {
    return require(type);
  } catch (error1) {}

  throw new Error(`${type} is not a valid reporter`);
}; //-----------------------------------------------------------------------------#
// Attempt to load the reporter code, create a new instance of the reporter,
// and publish the results to standard output.
//-----------------------------------------------------------------------------#


report = function (errorReport, options) {
  var instance, reporter;
  reporter = loadReporter(options.reporter);
  instance = new reporter(errorReport);
  instance.publish();
}; //-----------------------------------------------------------------------------#
// Normalize the resource path by removing the current working directory from
// it, to allow having relative paths in ignore specifications.
//-----------------------------------------------------------------------------#


normalize = function (resourcePath) {
  var cwd;
  cwd = process.cwd() + '/';

  if (resourcePath.startsWith(cwd)) {
    return resourcePath.slice(cwd.length);
  }

  return resourcePath;
}; //-----------------------------------------------------------------------------#
// Exports
//-----------------------------------------------------------------------------#


module.exports = function (input, ...other) {
  var callback, config, errorReport, lint, options, resourcePath;
  resourcePath = normalize(this.resourcePath);
  errorReport = coffeelint.getErrorReport();
  callback = this.async();
  options = utils.getOptions(this);
  config = getConfig(this.context);
  lint = reduce({
    error: {
      fail: options.failOnError,
      emit: this.emitError
    },
    warn: {
      fail: options.failOnWarning,
      emit: this.emitWarning
    }
  }); // Ideally, webpack wants us to be async, so hey, let's be async.

  setImmediate(function () {
    var check, err, issue; // Run the linter; results will be accumlated by CoffeeLint into the
    // errorReport object.

    errorReport.lint(resourcePath, input, config); // From which, we really just want to know if there was any kind of
    // issue, and, if there was, we need to check how to deal with them.

    ({
      issue,
      check
    } = lint(errorReport)); // If there was some type of issue, then issue a report. If checking
    // on the issue results in an error, then the issue is a fatal one.

    if (issue) {
      report(errorReport, options);

      if (err = check()) {
        return callback(err);
      }
    } // We either didn't encounter an issue, or the issue was non-fatal.


    return callback(null, input, ...other);
  });
}; //-----------------------------------------------------------------------------#