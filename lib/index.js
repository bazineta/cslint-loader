'use strict';

// Generated by CoffeeScript 2.0.1
//-----------------------------------------------------------------------------#

//  CoffeeLint Loader for Webpack

//-----------------------------------------------------------------------------#

//-----------------------------------------------------------------------------#
// Imports
//-----------------------------------------------------------------------------#
var Lint, LintError, LintType, _, async, coffeelint, getConfig, loadReporter, normalize, report, utils;

_ = require('lodash');

async = require('async');

coffeelint = require('coffeelint');

utils = require('loader-utils');

({ getConfig } = require('coffeelint/lib/configfinder'));

//-----------------------------------------------------------------------------#
// Lint Error; bag the call stack, as it's just noise.
//-----------------------------------------------------------------------------#
LintError = class LintError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;
    this.stack = false;
  }

};

//-----------------------------------------------------------------------------#
// Lint Type, used as a type-specific (error, warning) accumulator.
//-----------------------------------------------------------------------------#
LintType = class LintType {
  constructor() {
    this.lines = [];
  }

  count() {
    return this.lines.length;
  }

  error(error) {
    var line;
    line = `\nLine ${error.lineNumber}: ${error.message}`;
    if (error.context) {
      line += `: ${error.context}`;
    }
    this.lines.push(line);
  }

  check({ fail, emit }, callback) {
    var error;
    // If we have issues, then create an error object describing them.
    // If we are supposed to fail the build, then do so, otherwise just
    // emit the error.
    if (this.count()) {
      error = new LintError(this.lines.join());
      if (fail) {
        return callback(error);
      }
      emit(error);
    }
    // We either didn't have any issues, or we had some, but were not
    // instructed to fail the build due to them.
    return callback(null);
  }

};

//-----------------------------------------------------------------------------#
// Lint; reduces an error report to summary data.
//-----------------------------------------------------------------------------#
Lint = class Lint {
  constructor(errorReport) {
    this.type = {
      error: new LintType(),
      warn: new LintType()
    };
    _.forEach(errorReport.paths, errors => {
      var error, i, len;
      for (i = 0, len = errors.length; i < len; i++) {
        error = errors[i];
        this.type[error.level].error(error);
      }
    });
  }

  count() {
    return _.sum(_.invokeMap(this.type, 'count'));
  }

};

//-----------------------------------------------------------------------------#
// Attempt to load a reporter of the type requested, which can be either a
// function, in which case we're done, one of the default reporters that
// ship with CoffeeLint, or an external reporter. If no reporter was
// provided, use the stylish reporter. Throw if the reporter type provided
// is invalid.
//-----------------------------------------------------------------------------#
loadReporter = function (type) {
  if (_.isFunction(type)) {
    return type;
  }
  if (type == null) {
    type = 'coffeelint-stylish';
  }
  try {
    return require(`coffeelint/lib/reporters/${type}`);
  } catch (error1) {}
  try {
    return require(type);
  } catch (error1) {}
  throw new Error(`${type} is not a valid reporter`);
};

//-----------------------------------------------------------------------------#
// Attempt to load the reporter code, create a new instance of the reporter,
// and publish the results to standard output.
//-----------------------------------------------------------------------------#
report = function (errorReport, options) {
  var instance, reporter;
  reporter = loadReporter(options.reporter);
  instance = new reporter(errorReport);
  instance.publish();
};

//-----------------------------------------------------------------------------#
// Normalize the resource path by removing the current working directory from
// it, to allow having relative paths in ignore specifications.
//-----------------------------------------------------------------------------#
normalize = function (resourcePath) {
  var cwd;
  cwd = process.cwd() + '/';
  if (_.startsWith(resourcePath, cwd)) {
    return resourcePath.slice(cwd.length);
  }
  return resourcePath;
};

//-----------------------------------------------------------------------------#
// Exports
//-----------------------------------------------------------------------------#
module.exports = function (input) {
  var callback, errorReport, options, resourcePath;
  resourcePath = normalize(this.resourcePath);
  errorReport = coffeelint.getErrorReport();
  callback = _.partialRight(this.async(), input);
  options = utils.getOptions(this);
  return async.setImmediate(() => {
    var lint;
    errorReport.lint(resourcePath, input, getConfig(this.context));
    if (!(lint = new Lint(errorReport)).count()) {
      return callback(null);
    }
    report(errorReport, options);
    return async.parallel([callback => {
      return lint.type.error.check({
        fail: options.failOnError,
        emit: this.emitError
      }, callback);
    }, callback => {
      return lint.type.warn.check({
        fail: options.failOnWarning,
        emit: this.emitWarning
      }, callback);
    }], function (err) {
      return callback(err);
    });
  });
};

//-----------------------------------------------------------------------------#